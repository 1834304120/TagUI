http://tebel.org/index_mobile.php
// automation flow files start with an URL to tell TagUI where to go

// this flow shows how to use steps popup, frame, dom, js, { and } block
// for issues or questions, kindly feedback on GitHub or ken@tebel.org
// see cheatsheet for steps, conditions, finding element identifiers, etc
// https://github.com/tebelorg/TagUI#cheat-sheet

// click ABOUT footer to open new popup window
click ABOUT

// the execution context is still the original window
// in order to interact with popup window use popup step
// the parameter is keyword to look for in url of popup
// after that next step, context returns to original window
popup about_tebel
print file-about_tebel-LC2

// adding a blank line for output clarity, you can use either " or ' for text
echo ""

// if multiple steps need to be performed, use { and } blocks
popup about_tebel
{
print file-about_tebel-LC2
snap file-about_tebel-LC2
}

// for frame step it is used to access webpage implemented as a frame within another webpage
// the usage is similar to popup step, except that the parameter is the frame name
// if there is a subframe within the mainframe, use frame mainframe | subframe

// adding a blank line for output clarity, you can use either " or ' for text
// variables can be created using read or fetch step or manually defined
dummy_variable = 'original'
echo ''
echo 'returning to ' dummy_variable ' window context'

// after the steps in popup context are completed, context returns to original window
print (//*[@id="header"]//a)[1]
// above is XPath selector, an expressive way of identifying web elements

// default execution context is local, webpage dom (document object model) is insulated
// to use JavaScript code to access webpage dom for direct manipulation, use dom step
dom document.querySelector('#header p').focus()
// above is CSS selector. TagUI supports both CSS and XPath selectors

// by using return in the step, result can be returned to dom_result variable
dom return document.querySelector('#header p').innerText
echo 'dom_result - ' dom_result

// multiple lines can be combined into a single statement before returning value
dom document.querySelector('#header p').blur(); return document.querySelector('#header p').innerText
echo 'dom_result - ' dom_result
echo ''

// TagUI recognizes lines of JavaScript code automatically
// if some code is not recognized, use step js to explicitly indicate
// alternatively, modify logic in tagui_parse.php or raise an issue
test_number = 123
echo 'test_number - ' test_number
js test_number = 456
echo 'test_number - ' test_number
echo ''

// the step { and } helps to define step/code block to group step/code together
// earlier above it has been used for the popup step, it can also be used for frame step

// after for condition, or while condition, using { and } is required
// even if there is only 1 automation step or 1 line of JavaScript code
// TagUI will pick up the { and } to convert to properly nested CasperJS blocks
// so that the for loop variable can be accessed and used correctly in the loop

// avoid using while loop, auto-wait disables in while loop as it will hang CasperJS
// without auto-wait, situations where website needs time to react will not work
// while loop also might create an infinite loop if condition to exit never happens

// using for loop, there is auto-wait and powerful repetitive automation can be done
// for loops can also be nested, remember to use { and } to denote step/code blocks

// go to another web page with a table to practice for loop
https://github.com/tebelorg/TLE

// you can choose to have ; or don't have ; after variable assignment
test_string = "ABC";
echo 'test_string - ' test_string

// for loop can be expressed in natural language or JavaScript
for column from 1 to 6
{
// '+variable_name+' can be used where text is expected
show (//table)[3]//td['+column+']
// JavaScript code can also be used in the loop
test_string = "DEF";
}

echo 'test_string - ' test_string

