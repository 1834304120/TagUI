https://ca.finance.yahoo.com
// automation flow files start with an URL to tell TagUI where to go

// this flow shows how to use check step and CasperJS test assertions
// for issues or questions, kindly feedback on GitHub or ken@tebel.org
// see cheatsheet for steps, conditions, finding element identifiers, etc
// https://github.com/tebelorg/TagUI#cheat-sheet

// use check step for testing of conditions (text in quotation marks, either " or ' works)
read search-buttons to search_button_text
check search_button_text equals to "Search" | "search button text is correct" | "search button text is missing"

// when TagUI is run with test option, check step automatically performs test assertions
// test assertions are used to track if conditions to be met in a test scenario are all met
// the test assertions will give CasperJS the details needed to output a XUnit XML file,
// which is compatible with continuous integration tools such as Jenkins (for CI/CD)

// the examples will first show using check step (works with visible or headless Chrome, PhantomJS, Firefox)
// then similar examples to show using CasperJS default test assertions (works with PhantomJS / Firefox)

// ------------------------------------------------------------

// check whether the search button exists
check present('search-buttons') | 'search button exists' | 'search button does not exist'

// check whether the search box is visible
// something can exists on the webpage but set as hidden or not showing in its property
check visible('uh-search') | 'search box is visible' | 'search box is not visible'

// check whether the search button text is correct
// same as earlier example above but with output of button text value
read search-buttons to b_text
check b_text equals to 'Search' | 'search button text is correct - ' b_text | 'search button text is wrong - ' b_text

// check that the page url has yahoo in it (using \' to escape the single quote)
check url() contains 'yahoo' | 'url contains \'yahoo\'' | 'url does not contain \'yahoo\''

// check that the page title has Finance in it (using \' to escape the single quote)
check title() contains 'Finance' | 'title contains \'Finance\'' | 'title does not contain \'Finance\''

// check that the page has the text My Portfolio (double quotes can also be used for text)
check text() contains "My Portfolio" | "page text contains My Portfolio" | "page text does not contain My Portfolio"

// check that the header menu items are more than or equals to 6
check count('uh-tb-') more than or equals to 6 | 'header menu items >= 6' | 'header menu items < 6'

// use timer as a stopwatch to track elapsed time between calls
start = timer()

// make some navigational steps, by searching for microsoft
enter uh-search as microsoft
click //*[@id="search-button"]

// use timer as a stopwatch to track elapsed time between calls
time_taken = timer()
echo 'time taken - ' time_taken ' seconds'

// delay for many seconds in case network is slow, default timeout is 10 seconds in tagui_config.txt
wait 13.57 seconds

// before testing the condition that the quote is Microsoft
read //*[@id="quote-header-info"]//h1 to stock_quote
check stock_quote equals to "MICROSOFT (MSF.NX)" | 'quote is correct - ' stock_quote | 'quote is wrong - ' stock_quote

// ------------------------------------------------------------

// alternative examples using CasperJS test assertions - http://docs.casperjs.org/en/latest/modules/tester.html
// *NOTE THAT* CasperJS is not yet supporting Chrome, below will not work when chrome or headless option is used

// to use CasperJS test assertions, run ./tagui with test option
// test assertions will be enabled by running with test option
// otherwise automation flow will run without the assertions
// TagUI helps the same automation flow file run in 2 ways

// use tx('selector') to use TagUI dynamic XPath/CSS selector to select an element 
// in following order - xpath, css, id, name, class, title, aria-label, text(), href
// using this dynamic selector, a full XPath or CSS is not necessary for automation
// as properties id, name, class and so on are checked if they contain the identifier
// besides tx('selector'), you can also use 'selector' for CSS or x('selector') for XPath

// go back to starting page
https://ca.finance.yahoo.com

// check for search button before doing assertions as CasperJS assertions do not auto-wait
// without auto-wait for elements to appear, assertions will fail if page is not yet loaded
check present('search-buttons') | 'search button exists' | 'search button does not exist'

// shows message explicitly to point out that default CasperJS test assertions won't work with Chrome
echo '*NOTE THAT* CasperJS is not yet supporting Chrome, below will not work when chrome or headless option is used'

// check whether the search button exists
test.assertExists(tx('search-buttons'));

// check that search box is visible
test.assertVisible(tx('uh-search'));

// check whether the search button text is correct
test.assertSelectorHasText(tx('search-buttons'), 'Search');

// check that http status is correct (200 = OK)
test.assertHttpStatus(200);

// you can set your own message to display during testing by putting another parameter in assertion
// using the above 4 examples, testing the assertions again with custom test messages for comparison
test.assertExists(tx('search-buttons'),'check whether the search button exists');
test.assertVisible(tx('uh-search'),'check that search box is visible');
test.assertSelectorHasText(tx('search-buttons'), 'Search','check whether the search button text is correct');
test.assertHttpStatus(200,'check that http status is correct (200 = OK)');

// make some navigational steps, by searching for microsoft
enter uh-search as microsoft
click //*[@id="search-button"]

// delay for many seconds in case network is slow, default timeout is 10 seconds in tagui_config.txt
wait 13.57 seconds

// before testing the condition that the quote is Microsoft
read //*[@id="quote-header-info"]//h1 to stock_quote
test.assert(stock_quote=="MICROSOFT (MSF.NX)");

// capture some screenshots for test record purpose
snap //*[@id="quote-header-info"]//h1 to stock_quote.png
snap page to yahoo_finance.png

// to understand more on CasperJS test framework see this link
// http://docs.casperjs.org/en/latest/testing.html

// CasperJS will output a XUnit XML, which is compatible with continuous integration tools such as Jenkins 
// running together with the report option outputs a web version of the test execution log for easy sharing
// you can use datatables for batch testing using different data sets to test comprehensively for regression
// check datatables section of cheatsheet or automation flow sample /src/samples/6_datatables/6C_datatables
