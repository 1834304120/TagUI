#!/bin/bash
# SCRIPT FOR RUNNING TA.GUI FRAMEWORK ~ TEBEL.ORG #

# set local path to casperjs and environment path to phantomjs
CASPERJS_EXECUTABLE="/usr/local/bin/casperjs"
export PHANTOMJS_EXECUTABLE="/usr/local/bin/phantomjs"

# check firefox parameter to run on visible firefox browser through slimerjs 
if [ "$2" = "firefox" ]; then set -- "$1" "--engine=slimerjs" "${@:3}"; fi
if [ "$3" = "firefox" ]; then set -- "${@:1:2}" "--engine=slimerjs" "${@:4}"; fi
if [ "$4" = "firefox" ]; then set -- "${@:1:3}" "--engine=slimerjs" "${@:5}"; fi
if [ "$5" = "firefox" ]; then set -- "${@:1:4}" "--engine=slimerjs" "${@:6}"; fi
if [ "$6" = "firefox" ]; then set -- "${@:1:5}" "--engine=slimerjs" "${@:7}"; fi
if [ "$7" = "firefox" ]; then set -- "${@:1:6}" "--engine=slimerjs" "${@:8}"; fi
if [ "$8" = "firefox" ]; then set -- "${@:1:7}" "--engine=slimerjs" "${@:9}"; fi
if [ "$9" = "firefox" ]; then set -- "${@:1:8}" "--engine=slimerjs"; fi

# check debug parameter to show run-time backend messages from phantomjs
if [ "$2" = "debug" ]; then set -- "$1" "--verbose" "${@:3}"; fi
if [ "$3" = "debug" ]; then set -- "${@:1:2}" "--verbose" "${@:4}"; fi
if [ "$4" = "debug" ]; then set -- "${@:1:3}" "--verbose" "${@:5}"; fi
if [ "$5" = "debug" ]; then set -- "${@:1:4}" "--verbose" "${@:6}"; fi
if [ "$6" = "debug" ]; then set -- "${@:1:5}" "--verbose" "${@:7}"; fi
if [ "$7" = "debug" ]; then set -- "${@:1:6}" "--verbose" "${@:8}"; fi
if [ "$8" = "debug" ]; then set -- "${@:1:7}" "--verbose" "${@:9}"; fi
if [ "$9" = "debug" ]; then set -- "${@:1:8}" "--verbose"; fi

tagui_test_mode=false; export tagui_test_mode=false
# check test parameter to run flow as casperjs test automation script
if [ "$2" = "test" ]; then set -- "$1" "${@:3}"; tagui_test_mode=true; fi
if [ "$3" = "test" ]; then set -- "${@:1:2}" "${@:4}"; tagui_test_mode=true; fi
if [ "$4" = "test" ]; then set -- "${@:1:3}" "${@:5}"; tagui_test_mode=true; fi
if [ "$5" = "test" ]; then set -- "${@:1:4}" "${@:6}"; tagui_test_mode=true; fi
if [ "$6" = "test" ]; then set -- "${@:1:5}" "${@:7}"; tagui_test_mode=true; fi
if [ "$7" = "test" ]; then set -- "${@:1:6}" "${@:8}"; tagui_test_mode=true; fi
if [ "$8" = "test" ]; then set -- "${@:1:7}" "${@:9}"; tagui_test_mode=true; fi
if [ "$9" = "test" ]; then set -- "${@:1:8}"; tagui_test_mode=true; fi

tagui_html_report=false
# check report parameter to generate html formatted automation log
if [ "$2" = "report" ]; then set -- "$1" "${@:3}"; tagui_html_report=true; fi
if [ "$3" = "report" ]; then set -- "${@:1:2}" "${@:4}"; tagui_html_report=true; fi
if [ "$4" = "report" ]; then set -- "${@:1:3}" "${@:5}"; tagui_html_report=true; fi
if [ "$5" = "report" ]; then set -- "${@:1:4}" "${@:6}"; tagui_html_report=true; fi
if [ "$6" = "report" ]; then set -- "${@:1:5}" "${@:7}"; tagui_html_report=true; fi
if [ "$7" = "report" ]; then set -- "${@:1:6}" "${@:8}"; tagui_html_report=true; fi
if [ "$8" = "report" ]; then set -- "${@:1:7}" "${@:9}"; tagui_html_report=true; fi
if [ "$9" = "report" ]; then set -- "${@:1:8}"; tagui_html_report=true; fi

# concatenate all parameters to fix issue when calling casperjs test
params="$1".js" ""$2"" ""$3"" ""$4"" ""$5"" ""$6"" ""$7"" ""$8"" ""$9"

# initialise log file and set permissions to protect user data
echo -n "" > "$1".log; chmod 600 "$1".log

# check datatable csv file for batch automation
tagui_data_set_size=1
if [ -f "$1".csv ]; then
min_column=`awk -F',' '{print NF}' "$1".csv | sort -nu | head -n 1`
max_column=`awk -F',' '{print NF}' "$1".csv | sort -nu | tail -n 1`
if [ "$min_column" != "$max_column" ]; then echo "ERROR - $1.csv has inconsistent # of columns" | tee -a "$1".log
elif [ "$min_column" -lt 2 ]; then echo "ERROR - $1.csv has lesser than 2 columns" | tee -a "$1".log
else tagui_data_set_size="$(($min_column-1))"; fi; fi

# loop for managing multiple data sets in datatable 
for (( tagui_data_set=1; tagui_data_set<=$tagui_data_set_size; tagui_data_set++ ))
do export tagui_data_set=$tagui_data_set

# parse automation flow file and check for initial parse error before calling casperjs
php -q tagui_parse.php "$1" | tee -a "$1".log
if [ -s "$1".log ] && [ "$tagui_data_set" -eq 1 ]
then echo "ERROR - automation aborted due to above" | tee -a "$1".log; break
elif [ "$tagui_test_mode" == false ]; then $CASPERJS_EXECUTABLE $params | tee -a "$1".log
else export tagui_test_mode=true; $CASPERJS_EXECUTABLE test $params --xunit="$1".xml | tee -a "$1".log; fi; done

# check report option to generate html automation log
if [ -s "$1".log ] && [ "$tagui_html_report" == true ]; then php -q tagui_report.php "$1"; fi
